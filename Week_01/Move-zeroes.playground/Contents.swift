/*
* @lc app=leetcode.cn id=283 lang=swift
*
* [283] 移动零
*/

import Cocoa

var str = "Hello, playground"

/* 双指针法
 
 慢指针标识0的位置，遇到非0时与快指针上的值交换，交换后慢指针自加
 
 代码将保持以下不变：
 慢指针（lastnonzerofoundat）之前的所有元素都是非零的。
 当前指针和慢速指针之间的所有元素都是零。
 
 因此，当我们遇到一个非零元素时，我们需要交换当前指针和慢速指针指向的元素，然后同时前进这两个指针。如果它是零元素，我们只前进当前指针。
 
 时间复杂度：O(n)
 空间复杂度：O(1)
 */
func moveZeroes(nums: inout [Int]) {
    
    if nums.count == 0 {
        
        return
    }
    
    var i = 0
    
    for j in 0..<nums.count {
        
        if nums[j] != 0 {
            
            nums[i] = nums[j]
            if i != j { //i索引值上值为0时i、j不相等
                
                nums[j] = 0
            }
            i += 1
        }
        
    }
}

/*
for循环逻辑解析：
开始for循环时，未出现0之前，i == j，j在上次循环结束前加1与当前j相同；出现0时，j在循环后增加，i在上次加1后处于0位置(首位为0也符合)，本次不增加；在0之后的第一个非0数时，i和j交换取值，i+1后i必定在下一个0或交换过来的0上； 此后循环次步骤，直至for循环结束

总结： 在遇到0之后，i就标识0所在位置，交换值后再自加移动直至下一个0或交换的0，不会再移动到非0数，只交互成非0数
*/
